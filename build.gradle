plugins {
    id 'java'
    id 'distribution'
}

apply plugin: 'distribution'

group 'selenium.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.11.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.11.0'

    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.11.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.11.0'

    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
    compile group: 'de.monochromata.cucumber', name: 'reporting-plugin', version: '4.0.24'

    //API Test
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    testImplementation 'io.cucumber:cucumber-java:5.4.0'
    testCompile group: 'io.cucumber', name: 'cucumber-junit', version: '5.4.0'
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'steps', 'src/test/resources']
        }
    }
}

distributions {
    main {
        contents {
            from {
                fileTree(dir: 'src/main/resources', include:
                         [ 'chromedriver.exe'], excludes: []
                )
                fileTree(dir: '.', include:
                        [ 'README.md'], excludes: []
                )
            }
            from {
                jar
            }

        }
    }
}

jar {
    manifest {
        attributes "Main-Class": "Main"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}



